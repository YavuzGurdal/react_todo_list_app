{"version":3,"sources":["components/InputItem/InputItem.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["InputItem","state","title","handleChange","event","setState","target","name","value","itemSendHandler","preventDefault","props","itemPipe","id","shortid","generate","complete","detail","AiTwotoneHome","FaBusinessTime","MdSchool","FaExclamationCircle","MdErrorOutline","MdNotificationsActive","onSubmit","this","InputGroup","className","FormControl","placeholder","pHolder","aria-label","onChange","autoComplete","aria-describedby","Append","Button","onClick","type","variant","style","width","btnText","Component","Home","items","showFilteredTodos","itemReceiveHandler","todo","toggleComplete","map","deleteTodo","filter","updateTextareaText","addIcon","typeButton","MdLocalGroceryStore","updateShowFilteredTodos","y","addItemList","i","Card","key","Header","padding","height","backgroundColor","Date","now","parse","date","Accordion","Toggle","textDecorationColor","textDecoration","as","eventKey","Collapse","Body","selected","itemList","placeholderText","fontSize","DropdownButton","ButtonGroup","drop","Dropdown","Item","rows","left","duration","bottom","class","aria-hidden","right","top","display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22f452a4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport shortid from 'shortid';\r\n\r\nclass InputItem extends Component {\r\n\r\n    state = {\r\n        title: \"\"\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n        // input'a girilen degerleri yani name='text' de girilen degeri atama yapıyorum\r\n        // state'deki title 'a girilen degeri atiyorum\r\n    }\r\n\r\n    itemSendHandler = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.title !== '') { // burayi Bos deger girilememesi icin yaptım\r\n            this.props.itemPipe({\r\n                id: shortid.generate(), // benzersiz kisa id uretiyor\r\n                title: this.state.title,\r\n                complete: false,\r\n                detail: '',\r\n\r\n                AiTwotoneHome: false,\r\n                FaBusinessTime: false,\r\n                MdSchool: false,\r\n                FaExclamationCircle: false,\r\n                MdErrorOutline: false,\r\n                MdNotificationsActive: false\r\n            })\r\n            this.setState({ // bu kisim input yazilan yerin temizlenmesi icin.\r\n                title: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <form onSubmit={this.itemSendHandler}>\r\n                    <InputGroup className=\"mb-3\">\r\n                        <FormControl\r\n                            name=\"title\"\r\n                            // girilen degeri buradan gonderiyoruz. name='title' diyoruz. title inputtan girilen \r\n                            // degerler oluyor. event.target.value yazarak inputten girilen degere ulasmis oluyoruz. handleChange fonksiyonu ile\r\n\r\n                            value={this.state.title}\r\n                            placeholder={this.props.pHolder} // propsla Home.js'den aldik\r\n                            aria-label={this.props.pHolder}  // propsla Home.js'den aldik\r\n\r\n                            onChange={this.handleChange}\r\n\r\n                            autoComplete='off' // onceden yazilanlarin cikmamasi icin\r\n                            aria-describedby=\"basic-addon2\"\r\n                        />\r\n\r\n                        <InputGroup.Append>\r\n                            <Button onClick={this.itemSendHandler} type=\"submit\" variant=\"outline-primary\" style={{ width: \"104px\" }}>{this.props.btnText}</Button>\r\n                        </InputGroup.Append>\r\n                    </InputGroup>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputItem\r\n","import React, { Component } from 'react';\r\nimport { Accordion, Card, Button, DropdownButton, ButtonGroup, Dropdown } from 'react-bootstrap';\r\nimport InputItem from '../InputItem/InputItem';\r\nimport './Home.css'\r\nimport { FaTrashAlt, FaBusinessTime, FaCheck } from 'react-icons/fa';\r\nimport { MdSchool, MdNotificationsActive, MdLocalGroceryStore, MdErrorOutline } from \"react-icons/md\";\r\nimport { AiTwotoneHome } from \"react-icons/ai\";\r\n// asagıdaki kısım takvim icin\r\nimport DatePicker from 'react-datepicker'\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.min.css'\r\n\r\n// import FlipMove from 'react-flip-move'\r\n// <FlipMove duration={250} easing='ease-out'></FlipMove>\r\n\r\nimport Fade from 'react-reveal/Fade';\r\nimport Bounce from 'react-reveal/Bounce';\r\nimport Zoom from 'react-reveal/Zoom';\r\n\r\n// ekran ayarlarını index.html'de yaptım\r\n\r\nexport class Home extends Component {\r\n\r\n    state = {\r\n        items: [],\r\n        showFilteredTodos: 'all' // yapilan,yapilmayan ve hepsi ; filtreleme icin yazdim\r\n    }\r\n\r\n    itemReceiveHandler = todo => {\r\n        //kisa yol\r\n        this.setState({\r\n            items: [todo, ...this.state.items]\r\n        })\r\n        //console.log(this.state)\r\n    }\r\n\r\n\r\n    toggleComplete = (id) => {\r\n        this.setState({\r\n            items: this.state.items.map(todo => { // items'deki todo ya gore map yapip id'si esit olan varsa islemleri yapiyor.yoksa bisey yapmiyor\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        // id: todo.id,\r\n                        // text: todo.text, yukaridaki bunlarla ayni isi gormus oluyor.\r\n                        complete: !todo.complete\r\n                        // complete'in durumunu tersine ceviriyor.\r\n                    }\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    deleteTodo = (id) => {\r\n        this.setState({\r\n            items: this.state.items.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    updateTextareaText = (event) => {// textarea kismindan girilen degerleri alip state'de degistiriyoruz\r\n        this.setState({\r\n            [event.target.detail]: event.target.value\r\n        })\r\n    }\r\n\r\n    addIcon = (typeButton, id) => { // typeButton buttondan gelen parametreyi temsil ediyor. hangi butonda hengi parametreyi vermissek, tiklayinca o parametre typeButton'una esit oluyor.\r\n        this.setState({\r\n            items: this.state.items.map(todo => {\r\n                if ('AiTwotoneHome' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        // id: todo.id,\r\n                        // text: todo.text, yukaridaki bunlarla ayni isi gormus oluyor.\r\n                        AiTwotoneHome: !todo.AiTwotoneHome\r\n                        // true, false durumunu tersine ceviriyor.\r\n                    }\r\n                } else if ('FaBusinessTime' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        FaBusinessTime: !todo.FaBusinessTime\r\n                    }\r\n                } else if ('MdSchool' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        MdSchool: !todo.MdSchool\r\n                    }\r\n                } else if ('MdLocalGroceryStore' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        MdLocalGroceryStore: !todo.MdLocalGroceryStore\r\n                    }\r\n                } else if ('MdErrorOutline' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        MdErrorOutline: !todo.MdErrorOutline\r\n                    }\r\n                } else if ('MdNotificationsActive' === typeButton && todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        MdNotificationsActive: !todo.MdNotificationsActive\r\n                    }\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    updateShowFilteredTodos = (y) => { // bu fonksiyon butonlara basinca orda yazdigimiz degerleri todoToShow'a deger olarak atiyor\r\n        this.setState({\r\n            showFilteredTodos: y\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let items = [];\r\n\r\n        if (this.state.showFilteredTodos === 'all') {\r\n            items = this.state.items;\r\n        } else if (this.state.showFilteredTodos === 'active') {\r\n            items = this.state.items.filter(todo => !todo.complete);\r\n        } else if (this.state.showFilteredTodos === 'complete') {\r\n            items = this.state.items.filter(todo => todo.complete);\r\n        }\r\n\r\n        let addItemList = items.map((todo, i) => // burdaki todo state'deki items arrayi icindeki herbir objenin tamamı..\r\n\r\n            <Card key={todo.id}>\r\n\r\n                <Card.Header className='flex-container' style={{\r\n                    padding: '0', height: '60px',\r\n                    backgroundColor:\r\n                        todo.complete ? '#3fc5f0' :\r\n                            Date.now() - Date.parse(todo.date) > 172800000 ? '#ff7272' :\r\n                                Date.now() - Date.parse(todo.date) > 0 ? '#eef5b2' :\r\n                                    Date.now() - Date.parse(todo.date) < 0 ? '#6decb9' : ''\r\n                }} >\r\n\r\n                    {/* flex yaptim ama toggle ozelligi sadece yazida oldu. yani yaziya basinca calisiyor */}\r\n                    <div>\r\n                        <Accordion.Toggle\r\n                            style={{ textDecorationColor: 'red', textDecoration: todo.complete ? 'line-through' : \"\" }} className='accordionToggle' as={Button} variant=\"link\" eventKey={i}\r\n                        >\r\n                            {todo.title}\r\n\r\n                        </Accordion.Toggle>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Button // yapildi butonu\r\n                            onClick={() => this.toggleComplete(todo.id)}\r\n                            className='btn btn-success'\r\n                        >\r\n                            <FaCheck className='iconWidthHeight' />\r\n                        </Button>\r\n\r\n                        <Button // silme butonu\r\n                            onClick={() => this.deleteTodo(todo.id)}\r\n                            className='btn btn-danger'\r\n                        >\r\n                            <FaTrashAlt className='iconWidthHeight' />\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Card.Header>\r\n\r\n                <Accordion.Collapse eventKey={i}>\r\n                    <Card.Body className='p-0'>\r\n                        <DatePicker\r\n                            className=\"w-100 pl-4 border border-0\"\r\n                            selected={this.state.items[i].date} // burda okuyoruz. yani burda datadan okuyoruz\r\n                            onChange={\r\n                                date => {\r\n                                    let itemList = [...this.state.items]\r\n                                    itemList[i].date = date\r\n                                    this.setState({ items: itemList })\r\n\r\n                                    // console.log(Date.now())\r\n                                    // console.log(Date.parse(date)) // normal tarihi milisaniyeye ceviriyor.\r\n                                }\r\n                            }\r\n                            placeholderText=\"Set a Date\"\r\n                        />\r\n\r\n                        <div className='pl-4 iconandDropDownButtons' >\r\n\r\n                            <h6 className='m-0 pt-1' style={{ fontSize: '15px' }}>LABEL</h6>\r\n\r\n                            {todo.AiTwotoneHome ? <AiTwotoneHome className='icons text-primary' onClick={() => this.addIcon('AiTwotoneHome', todo.id)} /> : ''}\r\n\r\n                            {todo.FaBusinessTime ? <FaBusinessTime className='icons text-success' onClick={() => this.addIcon('FaBusinessTime', todo.id)} /> : ''}\r\n\r\n                            {todo.MdSchool ? <MdSchool className='icons text-warning' onClick={() => this.addIcon('MdSchool', todo.id)} /> : ''}\r\n\r\n                            {todo.MdLocalGroceryStore ? <MdLocalGroceryStore className='icons text-info' onClick={() => this.addIcon('MdLocalGroceryStore', todo.id)} /> : ''}\r\n\r\n                            {todo.MdErrorOutline ? <MdErrorOutline className='icons text-danger' onClick={() => this.addIcon('MdErrorOutline', todo.id)} /> : ''}\r\n\r\n                            {todo.MdNotificationsActive ? <MdNotificationsActive className='icons text-danger' onClick={() => this.addIcon('MdNotificationsActive', todo.id)} /> : ''}\r\n\r\n                            <DropdownButton\r\n                                className='dropDownButtonLabel'\r\n                                as={ButtonGroup}\r\n                                id={'dropdown-button-drop-left'}\r\n                                drop={'left'}\r\n                                variant=\"outline-primary\"\r\n                                title={'Label'}\r\n                            >\r\n\r\n                                <Dropdown.Item className='text-primary' eventKey=\"1\" onClick={() => this.addIcon('AiTwotoneHome', todo.id)}><AiTwotoneHome /> Family</Dropdown.Item>\r\n\r\n                                <Dropdown.Item className='text-success' eventKey=\"2\" onClick={() => this.addIcon('FaBusinessTime', todo.id)}><FaBusinessTime /> Business</Dropdown.Item>\r\n\r\n                                <Dropdown.Item className='text-warning' eventKey=\"3\" onClick={() => this.addIcon('MdSchool', todo.id)}><MdSchool /> School</Dropdown.Item>\r\n\r\n                                <Dropdown.Item className='text-info' eventKey=\"4\" onClick={() => this.addIcon('MdLocalGroceryStore', todo.id)}><MdLocalGroceryStore /> Shopping</Dropdown.Item>\r\n\r\n                                <Dropdown.Item className='text-danger' eventKey=\"5\" onClick={() => this.addIcon('MdErrorOutline', todo.id)}><MdErrorOutline /> Important</Dropdown.Item>\r\n\r\n                                <Dropdown.Item className='text-danger' eventKey=\"6\" onClick={() => this.addIcon('MdNotificationsActive', todo.id)}><MdNotificationsActive /> Urgent</Dropdown.Item>\r\n\r\n                            </DropdownButton>\r\n                        </div>\r\n\r\n                        <textarea\r\n                            id='textareaa'\r\n                            value={this.state.items.detail}\r\n                            onChange={this.updateTextareaText}\r\n                            rows='8'\r\n                            className='w-100 pl-4 pt-0 border border-0'\r\n                            placeholder=\"Please give me detail...\"\r\n                        />\r\n\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <Fade left duration={1600}>\r\n                    <Bounce bottom duration={1600}>\r\n                        <div className=\"jumbotron jumbotron-fluid mb-4 py-1 text-center\">\r\n                            <div className=\"container\">\r\n                                <h1 className=\"display-3\">\r\n                                    <span class=\"textEfectRubberBrand\" aria-hidden=\"true\">Todos&nbsp;</span>\r\n                                    <span class=\"textEfectRubberBrand\" aria-hidden=\"true\"> List</span>\r\n                                </h1>\r\n                                <p className=\"lead\">\r\n                                    <span class=\"textEfectRubberBrand\" aria-hidden=\"true\">Planlı bir hayat başarıya giden ilk adımdır.</span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </Bounce>\r\n                </Fade>\r\n\r\n                <Fade right duration={1600}>\r\n                    <Bounce bottom duration={1600}>\r\n                        <InputItem\r\n                            itemPipe={this.itemReceiveHandler} // aslında burada itemPipe ile gelen degerleri \r\n                            //itemReceiveHandler fonksiyonuna gonderiyoruz\r\n                            //diger bir deyisle itemReceiveHandler fonksiyonunun kopyasını InputItem'e gonderiyoruz.\r\n\r\n                            pHolder={\"Enter new Item\"} // bu ikisini props la gonderdim\r\n                            btnText={\"Add Item\"}\r\n                        />\r\n                    </Bounce>\r\n                </Fade>\r\n\r\n                <Bounce bottom duration={1600}>\r\n                    <Accordion>\r\n                        {addItemList}\r\n                    </Accordion>\r\n                </Bounce>\r\n\r\n                <Zoom top duration={1600}>\r\n                    <div className='mt-3' style={{ display: 'flex' }}>\r\n                        {/* bunlar filtreleme icin gerekli olan tuslar */}\r\n                        <div style={{ width: '33.33%' }}>\r\n                            <div className='mr-2'>\r\n                                <Button className='buttonFilter bg-danger' variant=\"danger\" onClick={() => this.updateShowFilteredTodos('active')}>ACTIVE</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '33.33%' }}>\r\n                            <div className='mx-2'>\r\n                                <Button className='buttonFilter bg-primary' variant=\"primary\" onClick={() => this.updateShowFilteredTodos('all')}>ALL</Button>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{ width: '33.33%' }}>\r\n                            <div className='ml-2'>\r\n                                <Button className='buttonFilter bg-success' variant=\"success\" onClick={() => this.updateShowFilteredTodos('complete')}>COMPLETE</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Zoom>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\n\nfunction App() {\n  return (\n    // className=\"App m-5\"\n    <div >\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}